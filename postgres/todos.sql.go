// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: todos.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const addTodo = `-- name: AddTodo :one
INSERT INTO todos (
  user_id, title, completed
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, title, completed
`

type AddTodoParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Title     string    `json:"title"`
	Completed bool      `json:"completed"`
}

func (q *Queries) AddTodo(ctx context.Context, arg AddTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, addTodo, arg.UserID, arg.Title, arg.Completed)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Completed,
	)
	return i, err
}

const deleteTodoById = `-- name: DeleteTodoById :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodoById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTodoById, id)
	return err
}

const getTodoById = `-- name: GetTodoById :one
SELECT id, user_id, title, completed FROM todos
WHERE id = $1 AND user_id = $2
LIMIT 1
`

type GetTodoByIdParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetTodoById(ctx context.Context, arg GetTodoByIdParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoById, arg.ID, arg.UserID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Completed,
	)
	return i, err
}

const getUserTodos = `-- name: GetUserTodos :many
SELECT id, user_id, title, completed FROM todos
WHERE user_id = $1
`

func (q *Queries) GetUserTodos(ctx context.Context, userID uuid.UUID) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getUserTodos, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoById = `-- name: UpdateTodoById :one
UPDATE todos
  SET completed = $2
WHERE id = $1
RETURNING id, user_id, title, completed
`

type UpdateTodoByIdParams struct {
	ID        uuid.UUID `json:"id"`
	Completed bool      `json:"completed"`
}

func (q *Queries) UpdateTodoById(ctx context.Context, arg UpdateTodoByIdParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodoById, arg.ID, arg.Completed)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Completed,
	)
	return i, err
}
